from enum import Enum
from typing import Literal, Mapping, overload

class dtype(Enum):
    int32 = ...
    int64 = ...
    float32 = ...
    float64 = ...
    string = ...


@overload
def mdict(key_type: Literal[dtype.int32, dtype.int64], value_type: Literal[dtype.int32, dtype.int64]) -> Mapping[int, int]: ...
@overload
def mdict(key_type: Literal[dtype.int32, dtype.int64], value_type: Literal[dtype.float32, dtype.float64]) -> Mapping[int, float]: ...
@overload
def mdict(key_type: Literal[dtype.int32, dtype.int64], value_type: Literal[dtype.string]) -> Mapping[int, str]: ...
@overload
def mdict(key_type: Literal[dtype.float32, dtype.float64], value_type: Literal[dtype.int32, dtype.int64]) -> Mapping[float, int]: ...
@overload
def mdict(key_type: Literal[dtype.float32, dtype.float64], value_type: Literal[dtype.float32, dtype.float64]) -> Mapping[float, float]: ...
@overload
def mdict(key_type: Literal[dtype.float32, dtype.float64], value_type: Literal[dtype.string]) -> Mapping[float, str]: ...
@overload
def mdict(key_type: Literal[dtype.string], value_type: Literal[dtype.int32, dtype.int64]) -> Mapping[str, int]: ...
@overload
def mdict(key_type: Literal[dtype.string], value_type: Literal[dtype.float32, dtype.float64]) -> Mapping[str, float]: ...
@overload
def mdict(key_type: Literal[dtype.string], value_type: Literal[dtype.string]) -> Mapping[str, str]: ...
